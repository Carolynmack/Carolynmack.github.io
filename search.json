[
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "ex.ipynb(2).html",
    "href": "ex.ipynb(2).html",
    "title": "Lecture 3",
    "section": "",
    "text": "a=‘a’"
  },
  {
    "objectID": "danl_210_python_basic (1).html",
    "href": "danl_210_python_basic (1).html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\nAn Important thing to note is the use of =\n= is an Assignment operator and NOT an equal sign\n= will assign the value on the right side to the varaible on the left side.\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nDifferent Data Types:\n\nintegers ex: 10\nfloats ex: 8.902\nstrings ex: “SUNY Geneseo”\nbooleans ex: True, False\nNothing ex: None\nList ex: [“apple”, “pear”, “orange”, “kiwi”] -lists are more useful bc they are mutable\nTuple ex: (“apple”, “pear”, “orange”, “kiwi”) -similar to lists but NOT mutable.\n\n\n10 == 20\n10 =='10' #comparing an int to a string\n# == is checking if both sides have the same value --&gt; Boolean Expression, T or F\n\nFalse\n\n\n##Operators +additon\n-subtraction\n*multiplication\n**powers\n/division\n//integer division\n\n#CW 4.1\n\n2**5/(7*(4-2**3))\n\n-1.1428571428571428\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\nIf statements are used for giving a result if certain condition is ture\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score &gt; 90 and score &lt; 100:\n    print(\"High score!\")\nelif score &gt; 10 and score &lt;= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n\nHigh score!\n\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}\n\n##List Comprehension: A concise way to create or modify lists\nSyntax: [expression for item in iterable if condition]\nex: squares = [x**2 for x in range(5)]\n##Dictionary Comprehension:\nA consicse way to create or modify dictionaries\nSyntax: {key_expression: value_expression for item in iterable if condition}\nex: squares_dict = {x: x**2 for x in range(5)}"
  },
  {
    "objectID": "danl_210_python_basic (1).html#what-is-python",
    "href": "danl_210_python_basic (1).html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "danl_210_python_basic (1).html#variables-and-data-types",
    "href": "danl_210_python_basic (1).html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "danl_210_python_basic (1).html#control-structures",
    "href": "danl_210_python_basic (1).html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\nAn Important thing to note is the use of =\n= is an Assignment operator and NOT an equal sign\n= will assign the value on the right side to the varaible on the left side.\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nDifferent Data Types:\n\nintegers ex: 10\nfloats ex: 8.902\nstrings ex: “SUNY Geneseo”\nbooleans ex: True, False\nNothing ex: None\nList ex: [“apple”, “pear”, “orange”, “kiwi”] -lists are more useful bc they are mutable\nTuple ex: (“apple”, “pear”, “orange”, “kiwi”) -similar to lists but NOT mutable.\n\n\n10 == 20\n10 =='10' #comparing an int to a string\n# == is checking if both sides have the same value --&gt; Boolean Expression, T or F\n\nFalse\n\n\n##Operators +additon\n-subtraction\n*multiplication\n**powers\n/division\n//integer division\n\n#CW 4.1\n\n2**5/(7*(4-2**3))\n\n-1.1428571428571428\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\nIf statements are used for giving a result if certain condition is ture\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score &gt; 90 and score &lt; 100:\n    print(\"High score!\")\nelif score &gt; 10 and score &lt;= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n\nHigh score!"
  },
  {
    "objectID": "danl_210_python_basic (1).html#functions",
    "href": "danl_210_python_basic (1).html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "danl_210_python_basic (1).html#lists-and-dictionaries",
    "href": "danl_210_python_basic (1).html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}\n\n##List Comprehension: A concise way to create or modify lists\nSyntax: [expression for item in iterable if condition]\nex: squares = [x**2 for x in range(5)]\n##Dictionary Comprehension:\nA consicse way to create or modify dictionaries\nSyntax: {key_expression: value_expression for item in iterable if condition}\nex: squares_dict = {x: x**2 for x in range(5)}"
  },
  {
    "objectID": "danl_210_python_basic (1).html#booleans-conditions",
    "href": "danl_210_python_basic (1).html#booleans-conditions",
    "title": "Python Basics",
    "section": "Booleans Conditions",
    "text": "Booleans Conditions\nx==y: is x equal to y?\nx!=y: is x not equal to y?\nx&gt;y: is x greater y?\n# This is formatted as code\nx&gt;=y: is x greater than or equal to y?\n\n#CW2:\n20=='20'\n#results in false bc a integer (left side) is not the same type as a string (right side)\n\nFalse"
  },
  {
    "objectID": "danl_210_python_basic (1).html#slicing-methods",
    "href": "danl_210_python_basic (1).html#slicing-methods",
    "title": "Python Basics",
    "section": "Slicing Methods",
    "text": "Slicing Methods\nImportant to remember for lists, Index Starts at 0 not\nUsed when you want to extract a substring from the string\nIn python it is left inclusive and right exlcusive\n###Format [start : end : stop]\n[:] –&gt; extracts the entire list\n##Bulit in Functions len() command gets the length of the string or how many elements are in a list\nDot operation:\n-used to access atributes ex:\n( .split, . delete, .add, .join)\n\n#Slicing Methods practice:\n# [start: end: step]\nletters ='abcdeghij'\nletters[4:]\n\n'eghij'\n\n\n\nletters[:3] #it does not include the 3rd element! its left inclusive but RIGHT EXCLUSIVE and remember index starts at 0\n\n'abc'\n\n\n\n#Cw 4.3\nfare= \"$10.00\"\ntip= \"2.00$\"\ntax= \"$ 0.80\"\n\nfare=fare[1:] #slicing to exclude the $\ntip=tip[:-1]\ntax=tax[2:]\n\nfare = float(fare)  #type casting\ntip=float(tip)\ntax=float(tax)\n\ntot=fare+tip+tax\nprint(\"the total price is\", tot)\n\nthe total price is 12.8"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nSpotify Blog\n\n\n\n\n\n\n\n\nFeb 27, 2025\n\n\nCarolyn_Mack\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\nFeb 7, 2025\n\n\nCarolyn Mack\n\n\n6 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl-210-python-basic.html",
    "href": "danl-210-python-basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "danl-210-python-basic.html#what-is-python",
    "href": "danl-210-python-basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "danl-210-python-basic.html#variables-and-data-types",
    "href": "danl-210-python-basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "danl-210-python-basic.html#control-structures",
    "href": "danl-210-python-basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "danl-210-python-basic.html#functions",
    "href": "danl-210-python-basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "danl-210-python-basic.html#lists-and-dictionaries",
    "href": "danl-210-python-basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Carolyn Mack",
    "section": "",
    "text": "Junior; BA Mathematics major, with a minor in Data Analtyics and Business Studies. Student-Athlete at SUNY Geneseo."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Carolyn Mack",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Mathematics | Aug 2022 - May 2026  Minor in Business Studies and Data Analytics"
  },
  {
    "objectID": "posts/HW2/danl_210_hw2blog_Mack_Carolyn (1).html",
    "href": "posts/HW2/danl_210_hw2blog_Mack_Carolyn (1).html",
    "title": "Spotify Blog",
    "section": "",
    "text": "# Below is to import the pandas library as pd\nimport pandas as pd\n\n# Below is for an interactive display of DataFrame in Colab\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\nWarning: total number of rows (198005) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns"
  },
  {
    "objectID": "posts/HW2/danl_210_hw2blog_Mack_Carolyn (1).html#some-of-my-favorite-artists",
    "href": "posts/HW2/danl_210_hw2blog_Mack_Carolyn (1).html#some-of-my-favorite-artists",
    "title": "Spotify Blog",
    "section": "Some of my favorite Artists:",
    "text": "Some of my favorite Artists:\nI am a frequent Spotify user and love to love to music. First I wanted to find out if some of my favorite Artists were apart of the Data Frame\nI used the filtering method using the varaible artist_name to see if artists like Taylor Swift, Morgan Wallen and SZA were included.\n\nFor Taylor Swift there were 246 observations; with 63 different songs.\nFor Morgan Wallen there are 2 observations and they were both the same song.\nFor SZA there was 100 observations in this DataFram, with 21 different songs.\n\n\nspotify_Taylor_Swift=spotify[spotify[\"artist_name\"]==\"Taylor Swift\"]\nspotify_Taylor_Swift\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n1480\n29\ngroovy\n33\nTaylor Swift\nLook What You Made Me Do\n211859\nLook What You Made Me Do\n\n\n2679\n44\ntaylor swift\n0\nTaylor Swift\nSafe & Sound - from The Hunger Games Soundtrack\n240066\nThe Hunger Games: Songs From District 12 And B...\n\n\n2681\n44\ntaylor swift\n2\nTaylor Swift\nCrazier\n191946\nHannah Montana The Movie\n\n\n3686\n64\nElizabeth\n48\nTaylor Swift\nSafe & Sound - from The Hunger Games Soundtrack\n240066\nThe Hunger Games: Songs From District 12 And B...\n\n\n3687\n64\nElizabeth\n49\nTaylor Swift\nEyes Open\n244586\nThe Hunger Games: Songs From District 12 And B...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197236\n999986\nWork\n105\nTaylor Swift\nBlank Space\n231826\n1989\n\n\n197241\n999986\nWork\n110\nTaylor Swift\nBad Blood\n211933\n1989\n\n\n197257\n999986\nWork\n126\nTaylor Swift\n...Ready For It?\n208198\n...Ready For It?\n\n\n197258\n999986\nWork\n127\nTaylor Swift\nLook What You Made Me Do\n211859\nLook What You Made Me Do\n\n\n197552\n999989\nPARTAY\n82\nTaylor Swift\nBad Blood\n211933\n1989\n\n\n\n\n246 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nspotify_Taylor_Swift['track_name'].count()\n\n246\n\n\n\nspotify_Taylor_Swift[[\"track_name\"]].nunique()\n\n\n\n\n\n\n\n\n0\n\n\n\n\ntrack_name\n63\n\n\n\n\ndtype: int64\n\n\n\nFound that this Data Frame includes 63 different Taylor swift songs."
  },
  {
    "objectID": "posts/HW2/danl_210_hw2blog_Mack_Carolyn (1).html#wanted-to-sort-the-taylor-swift-dataframe-by-acending-order-of-the-track-name",
    "href": "posts/HW2/danl_210_hw2blog_Mack_Carolyn (1).html#wanted-to-sort-the-taylor-swift-dataframe-by-acending-order-of-the-track-name",
    "title": "Spotify Blog",
    "section": "Wanted to sort the Taylor Swift DataFrame by acending order of the Track Name",
    "text": "Wanted to sort the Taylor Swift DataFrame by acending order of the Track Name\n\nspotify_Taylor_Swift.sort_values(by=[\"track_name\"],\n                                 ascending =True)\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n84981\n1273\ntailgate\n17\nTaylor Swift\n...Ready For It?\n208198\n...Ready For It?\n\n\n34097\n513\nSunrise\n22\nTaylor Swift\n...Ready For It?\n208198\n...Ready For It?\n\n\n165293\n999489\nHappy Chill\n128\nTaylor Swift\n...Ready For It?\n208198\n...Ready For It?\n\n\n105822\n1577\ncurrent\n24\nTaylor Swift\n...Ready For It?\n208198\n...Ready For It?\n\n\n99935\n1489\nDat new new\n15\nTaylor Swift\n...Ready For It?\n208198\n...Ready For It?\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n162674\n999448\n#tb\n54\nTaylor Swift\nYou Belong With Me\n231133\nFearless\n\n\n189341\n999861\n&lt;333\n9\nTaylor Swift\nYou Belong With Me\n231133\nFearless\n\n\n177282\n999670\nStuff I like\n62\nTaylor Swift\nYou Belong With Me\n231133\nFearless\n\n\n122929\n1828\nMy Favorites\n192\nTaylor Swift\nYou're Not Sorry\n261786\nFearless\n\n\n128486\n1909\nvibin\n153\nTaylor Swift\nYou're Not Sorry\n261786\nFearless\n\n\n\n\n246 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nspotify[spotify[\"artist_name\"]==\"Morgan Wallen\"]\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n78310\n1161\ncountry favs\n13\nMorgan Wallen\nThe Way I Talk\n208240\nThe Way I Talk\n\n\n142750\n999132\nsumma\n11\nMorgan Wallen\nThe Way I Talk\n208240\nThe Way I Talk\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nspotify_SZA=spotify[spotify[\"artist_name\"]==\"SZA\"]\nspotify_SZA\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n1218\n22\nfall '17\n0\nSZA\nDrew Barrymore\n231400\nCtrl\n\n\n1223\n22\nfall '17\n5\nSZA\nGarden (Say It Like Dat)\n208400\nCtrl\n\n\n11092\n169\nSummer Chill\n15\nSZA\nSweet November\n243744\nZ\n\n\n11616\n177\nAnother\n13\nSZA\nUr\n235769\nZ\n\n\n12178\n185\nfeelz\n109\nSZA\nLove Galore\n275080\nCtrl\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n183272\n999761\nLithium\n15\nSZA\nBabylon (feat. Kendrick Lamar)\n234284\nZ\n\n\n187739\n999834\nspring 17\n15\nSZA\nJulia\n219642\nZ\n\n\n189851\n999867\nLady Jams\n99\nSZA\nDrew Barrymore\n231400\nCtrl\n\n\n195969\n999965\nfeels\n124\nSZA\nLove Galore\n275080\nCtrl\n\n\n197805\n999994\nSlow Songs\n54\nSZA\nLove Galore\n275080\nCtrl\n\n\n\n\n100 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nspotify_SZA[[\"track_name\"]].nunique()\n\n\n\n\n\n\n\n\n0\n\n\n\n\ntrack_name\n21\n\n\n\n\ndtype: int64\n\n\nI wanted to see how many Taylor Swift songs are in the playist of “Throw backs or”Workouk” and I was really surprised to see only 2 observations. Similiarly I check how many Taylor Swift songs were in the “Summa” playlist and only found that there were 6 observations.\n\nspotify.query(\"artist_name =='Taylor Swift' & (playlist_name == 'throw backs' | playlist_name == 'workout')\")\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n22313\n355\nthrow backs\n44\nTaylor Swift\nBetter Than Revenge\n217160\nSpeak Now\n\n\n22335\n355\nthrow backs\n66\nTaylor Swift\nPicture To Burn\n173066\nTaylor Swift\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nspotify.query(\"artist_name =='Taylor Swift' & playlist_name == 'summa'\")\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n142821\n999132\nsumma\n82\nTaylor Swift\nWelcome To New York\n212600\n1989\n\n\n142822\n999132\nsumma\n83\nTaylor Swift\nNew Romantics\n230466\n1989\n\n\n142823\n999132\nsumma\n84\nTaylor Swift\nHoly Ground\n201853\nRed\n\n\n142824\n999132\nsumma\n85\nTaylor Swift\nSpeak Now\n240760\nSpeak Now\n\n\n142857\n999132\nsumma\n118\nTaylor Swift\nWonderland\n245560\n1989\n\n\n142862\n999132\nsumma\n123\nTaylor Swift\nLook What You Made Me Do\n211859\nLook What You Made Me Do\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nspotify.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 198005 entries, 0 to 198004\nData columns (total 7 columns):\n #   Column         Non-Null Count   Dtype \n---  ------         --------------   ----- \n 0   pid            198005 non-null  int64 \n 1   playlist_name  198005 non-null  object\n 2   pos            198005 non-null  int64 \n 3   artist_name    198005 non-null  object\n 4   track_name     198005 non-null  object\n 5   duration_ms    198005 non-null  int64 \n 6   album_name     198005 non-null  object\ndtypes: int64(3), object(4)\nmemory usage: 10.6+ MB\n\n\n\nspotify[spotify[\"playlist_name\"]==\"workout\"]\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n17626\n273\nworkout\n0\nRob Zombie\nDragula\n222840\nHellbilly Deluxe\n\n\n17627\n273\nworkout\n1\nThe Script\nHall of Fame\n202533\n#3 Deluxe Version\n\n\n17628\n273\nworkout\n2\nRoy Jones Jr.\nCan't Be Touched (feat. Mr. Magic & Trouble)\n214400\nBody Head Bangerz, Vol. 1\n\n\n17629\n273\nworkout\n3\nLinkin Park\nNumb\n185586\nMeteora\n\n\n17630\n273\nworkout\n4\nDorrough Music\nGet Big\n225866\nGet Big\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n161424\n999432\nworkout\n21\nTrinidad James\nFemale$ Welcomed\n190080\nDon't Be S.A.F.E.\n\n\n161425\n999432\nworkout\n22\nMac Miller\nDonald Trump\n164586\nBlue Slide Park\n\n\n161426\n999432\nworkout\n23\nOutKast\nRoses\n369573\nSpeakerboxxx/The Love Below\n\n\n161427\n999432\nworkout\n24\nZedd\nClarity\n271426\nClarity\n\n\n161428\n999432\nworkout\n25\nYoung Money\nSteady Mobbin\n310733\nWe Are Young Money\n\n\n\n\n520 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\nI am also a big fan of country music so I was curious to what the playlist “country favs” inlcuded.\n\nspotify[spotify[\"playlist_name\"]==\"country favs\"]\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\ntrack_name\nduration_ms\nalbum_name\n\n\nartist_name\n\n\n\n\n\n\n\n\n\n\nCole Swindell\n1161\ncountry favs\n0\nFlatliner (feat. Dierks Bentley)\n177066\nYou Should Be Here\n\n\nSam Hunt\n1161\ncountry favs\n1\nBody Like A Back Road\n165386\nBody Like A Back Road\n\n\nDierks Bentley\n1161\ncountry favs\n2\nDrunk On A Plane\n254466\nRISER\n\n\nBrett Young\n1161\ncountry favs\n3\nIn Case You Didn't Know\n224853\nBrett Young\n\n\nDierks Bentley\n1161\ncountry favs\n4\nBlack\n211160\nBlack\n\n\nDarius Rucker\n1161\ncountry favs\n5\nIf I Told You\n212320\nWhen Was The Last Time\n\n\nFlorida Georgia Line\n1161\ncountry favs\n6\nGod, Your Mama, And Me\n183413\nDig Your Roots\n\n\nLady Antebellum\n1161\ncountry favs\n7\nYou Look Good\n181000\nHeart Break\n\n\nBilly Currington\n1161\ncountry favs\n8\nDo I Make You Wanna\n234306\nSummer Forever\n\n\nBrothers Osborne\n1161\ncountry favs\n9\nIt Ain't My Fault\n216800\nPawn Shop\n\n\nKip Moore\n1161\ncountry favs\n10\nMore Girls Like You\n154706\nSLOWHEART\n\n\nDrake White\n1161\ncountry favs\n11\nMakin’ Me Look Good Again\n238933\nSpark\n\n\nLuke Bryan\n1161\ncountry favs\n12\nPlay It Again\n226866\nCrash My Party\n\n\nMorgan Wallen\n1161\ncountry favs\n13\nThe Way I Talk\n208240\nThe Way I Talk\n\n\nLuke Combs\n1161\ncountry favs\n14\nHurricane\n222533\nThis One's for You\n\n\nLauren Alaina\n1161\ncountry favs\n15\nRoad Less Traveled\n216266\nRoad Less Traveled\n\n\nDan + Shay\n1161\ncountry favs\n16\nHow Not To\n192000\nObsessed\n\n\nLuke Bryan\n1161\ncountry favs\n17\nFast\n206213\nKill The Lights\n\n\nBlake Shelton\n1161\ncountry favs\n18\nEvery Time I Hear That Song\n214800\nIf I'm Honest\n\n\nSam Hunt\n1161\ncountry favs\n19\nMake You Miss Me\n225693\nMontevallo\n\n\nDylan Scott\n1161\ncountry favs\n20\nMy Girl\n197640\nDylan Scott\n\n\nJosh Turner\n1161\ncountry favs\n21\nHometown Girl\n215080\nDeep South\n\n\nThomas Rhett\n1161\ncountry favs\n22\nStar Of The Show\n181200\nTangled Up\n\n\nJason Aldean\n1161\ncountry favs\n23\nA Little More Summertime\n219546\nThey Don't Know\n\n\nFlorida Georgia Line\n1161\ncountry favs\n24\nH.O.L.Y.\n194186\nDig Your Roots\n\n\nZac Brown Band\n1161\ncountry favs\n25\nMy Old Man\n227222\nWelcome Home\n\n\nKeith Urban\n1161\ncountry favs\n26\nBlue Ain't Your Color\n230600\nRipcord\n\n\nTim McGraw\n1161\ncountry favs\n27\nSpeak to a Girl\n232160\nThe Rest of Our Life\n\n\nLittle Big Town\n1161\ncountry favs\n28\nBetter Man\n263120\nThe Breaker\n\n\nJon Pardi\n1161\ncountry favs\n29\nDirt On My Boots\n201893\nCalifornia Sunrise\n\n\nBrett Eldredge\n1161\ncountry favs\n30\nSomethin' I'm Good At\n217333\nBrett Eldredge\n\n\nRascal Flatts\n1161\ncountry favs\n31\nI Like The Sound Of That\n209280\nRewind\n\n\nDierks Bentley\n1161\ncountry favs\n32\nSomewhere On A Beach\n197120\nBlack\n\n\nFrankie Ballard\n1161\ncountry favs\n33\nIt All Started with a Beer\n237800\nIt All Started With A Beer\n\n\nBilly Currington\n1161\ncountry favs\n34\nIt Don't Hurt Like It Used To\n184506\nSummer Forever\n\n\nEric Church\n1161\ncountry favs\n35\nRecord Year\n179346\nMr. Misunderstood\n\n\nLuke Bryan\n1161\ncountry favs\n36\nMove\n227413\nKill The Lights\n\n\nRascal Flatts\n1161\ncountry favs\n37\nYours If You Want It\n206826\nBack To Us\n\n\nChris Young\n1161\ncountry favs\n38\nSober Saturday Night (feat. Vince Gill)\n194560\nI'm Comin' Over\n\n\nChris Young\n1161\ncountry favs\n39\nI'm Comin' Over\n197280\nI'm Comin' Over\n\n\nMichael Ray\n1161\ncountry favs\n40\nThink A Little Less\n176986\nMichael Ray\n\n\nBlake Shelton\n1161\ncountry favs\n41\nA Guy With a Girl\n189466\nIf I'm Honest\n\n\nCole Swindell\n1161\ncountry favs\n42\nMiddle of a Memory\n226306\nYou Should Be Here\n\n\nFlorida Georgia Line\n1161\ncountry favs\n43\nMay We All\n226173\nDig Your Roots\n\n\nThomas Rhett\n1161\ncountry favs\n44\nVacation\n223253\nTangled Up\n\n\nChris Janson\n1161\ncountry favs\n45\nFix a Drink\n188933\nEVERYBODY\n\n\nBlake Shelton\n1161\ncountry favs\n46\nCame Here to Forget\n220413\nIf I'm Honest\n\n\nCarrie Underwood\n1161\ncountry favs\n47\nChurch Bells\n193333\nStoryteller\n\n\nOld Dominion\n1161\ncountry favs\n48\nSong for Another Time\n191826\nMeat and Candy\n\n\nBrett Eldredge\n1161\ncountry favs\n49\nWanna Be That Song\n236226\nIllinois\n\n\nEric Church\n1161\ncountry favs\n50\nKill A Word\n199213\nMr. Misunderstood\n\n\nMiranda Lambert\n1161\ncountry favs\n51\nWe Should Be Friends\n170746\nThe Weight of These Wings\n\n\nJason Aldean\n1161\ncountry favs\n52\nAny Ol' Barstool\n203293\nThey Don't Know\n\n\nMaren Morris\n1161\ncountry favs\n53\nI Could Use a Love Song\n196421\nHERO (Deluxe Edition)\n\n\nLuke Combs\n1161\ncountry favs\n54\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\nScotty McCreery\n1161\ncountry favs\n55\nFive More Minutes\n238954\nFive More Minutes\n\n\nLevon\n1161\ncountry favs\n56\nGive Up Your Heart\n222459\nLevon - EP\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nWas also curious to see what the mean time of Taylor Swifts songs in this DataFrame is\n\nspotify_Taylor_Swift[\"duration_ms\"].mean()\n#this gives the mean duration of her songs in milliseconds,\n\n231053.36585365853\n\n\n\nspotify_Taylor_Swift[\"duration_ms\"].mean()/60000\n#trying to find the mean duration of her songs in minutes\n\n3.8508894308943087\n\n\n\n\nCreating a new index to search for playlist_names this way.\n\n#creating a new index\nspotify2=spotify.set_index(keys = \"playlist_name\")\nspotify2\n\nWarning: total number of rows (198005) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\npid\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\nplaylist_name\n\n\n\n\n\n\n\n\n\n\nThrowbacks\n0\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\nThrowbacks\n0\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\nThrowbacks\n0\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\nThrowbacks\n0\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\nThrowbacks\n0\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n✝️\n999998\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n✝️\n999998\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n✝️\n999998\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n✝️\n999998\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n✝️\n999998\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 6 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n#locating observations by index label\nspotify2.index\nspotify2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 198005 entries, Throwbacks to ✝️\nData columns (total 6 columns):\n #   Column       Non-Null Count   Dtype \n---  ------       --------------   ----- \n 0   pid          198005 non-null  int64 \n 1   pos          198005 non-null  int64 \n 2   artist_name  198005 non-null  object\n 3   track_name   198005 non-null  object\n 4   duration_ms  198005 non-null  int64 \n 5   album_name   198005 non-null  object\ndtypes: int64(3), object(3)\nmemory usage: 14.6+ MB\n\n\n\n#locating data by the index play_list name \"summa\"\nspotify2.loc[\"summa\"]\n\n\n  \n    \n\n\n\n\n\n\npid\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\nplaylist_name\n\n\n\n\n\n\n\n\n\n\nsumma\n999132\n0\nHalsey\nNow Or Never\n214801\nhopeless fountain kingdom\n\n\nsumma\n999132\n1\nBrad Paisley\nAmerican Saturday Night\n274200\nAmerican Saturday Night\n\n\nsumma\n999132\n2\nScotty McCreery\nFeelin’ It\n198226\nSee You Tonight\n\n\nsumma\n999132\n3\nCraig Morgan\nRedneck Yacht Club\n230373\nMy Kind Of Livin'\n\n\nsumma\n999132\n4\nBrantley Gilbert\nThe Weekend\n187760\nThe Devil Don't Sleep\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\nsumma\n999132\n120\nLady Gaga\nBorn This Way\n260253\nBorn This Way\n\n\nsumma\n999132\n121\nLady Gaga\nApplause\n212333\nARTPOP\n\n\nsumma\n999132\n122\nMac Miller\nLife Ain't Easy\n157691\nBest Day Ever\n\n\nsumma\n999132\n123\nTaylor Swift\nLook What You Made Me Do\n211859\nLook What You Made Me Do\n\n\nsumma\n999132\n124\nSam Hunt\nLeave The Night On\n192160\nMontevallo\n\n\n\n\n125 rows × 6 columns"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html",
    "href": "posts/python-basic/danl_210_python_basics.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\nAn Important thing to note is the use of =\n= is an Assignment operator and NOT an equal sign\n= will assign the value on the right side to the varaible on the left side.\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nDifferent Data Types:\n\nintegers ex: 10\nfloats ex: 8.902\nstrings ex: “SUNY Geneseo”\nbooleans ex: True, False\nNothing ex: None\nList ex: [“apple”, “pear”, “orange”, “kiwi”] -lists are more useful bc they are mutable\nTuple ex: (“apple”, “pear”, “orange”, “kiwi”) -similar to lists but NOT mutable.\n\n\n10 == 20\n10 =='10' #comparing an int to a string\n# == is checking if both sides have the same value --&gt; Boolean Expression, T or F\n\nFalse\n\n\n##Operators +additon\n-subtraction\n*multiplication\n**powers\n/division\n//integer division\n\n#CW 4.1\n\n2**5/(7*(4-2**3))\n\n-1.1428571428571428\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\nIf statements are used for giving a result if certain condition is ture\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score &gt; 90 and score &lt; 100:\n    print(\"High score!\")\nelif score &gt; 10 and score &lt;= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n\nHigh score!\n\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}\n\n##List Comprehension: A concise way to create or modify lists\nSyntax: [expression for item in iterable if condition]\nex: squares = [x**2 for x in range(5)]\n##Dictionary Comprehension:\nA consicse way to create or modify dictionaries\nSyntax: {key_expression: value_expression for item in iterable if condition}\nex: squares_dict = {x: x**2 for x in range(5)}"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#what-is-python",
    "href": "posts/python-basic/danl_210_python_basics.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#variables-and-data-types",
    "href": "posts/python-basic/danl_210_python_basics.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#control-structures",
    "href": "posts/python-basic/danl_210_python_basics.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\nAn Important thing to note is the use of =\n= is an Assignment operator and NOT an equal sign\n= will assign the value on the right side to the varaible on the left side.\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nDifferent Data Types:\n\nintegers ex: 10\nfloats ex: 8.902\nstrings ex: “SUNY Geneseo”\nbooleans ex: True, False\nNothing ex: None\nList ex: [“apple”, “pear”, “orange”, “kiwi”] -lists are more useful bc they are mutable\nTuple ex: (“apple”, “pear”, “orange”, “kiwi”) -similar to lists but NOT mutable.\n\n\n10 == 20\n10 =='10' #comparing an int to a string\n# == is checking if both sides have the same value --&gt; Boolean Expression, T or F\n\nFalse\n\n\n##Operators +additon\n-subtraction\n*multiplication\n**powers\n/division\n//integer division\n\n#CW 4.1\n\n2**5/(7*(4-2**3))\n\n-1.1428571428571428\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\nIf statements are used for giving a result if certain condition is ture\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score &gt; 90 and score &lt; 100:\n    print(\"High score!\")\nelif score &gt; 10 and score &lt;= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n\nHigh score!"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#functions",
    "href": "posts/python-basic/danl_210_python_basics.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#lists-and-dictionaries",
    "href": "posts/python-basic/danl_210_python_basics.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}\n\n##List Comprehension: A concise way to create or modify lists\nSyntax: [expression for item in iterable if condition]\nex: squares = [x**2 for x in range(5)]\n##Dictionary Comprehension:\nA consicse way to create or modify dictionaries\nSyntax: {key_expression: value_expression for item in iterable if condition}\nex: squares_dict = {x: x**2 for x in range(5)}"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#booleans-conditions",
    "href": "posts/python-basic/danl_210_python_basics.html#booleans-conditions",
    "title": "Python Basics",
    "section": "Booleans Conditions",
    "text": "Booleans Conditions\nx==y: is x equal to y?\nx!=y: is x not equal to y?\nx&gt;y: is x greater y?\n# This is formatted as code\nx&gt;=y: is x greater than or equal to y?\n\n#CW2:\n20=='20'\n#results in false bc a integer (left side) is not the same type as a string (right side)\n\nFalse"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#slicing-methods",
    "href": "posts/python-basic/danl_210_python_basics.html#slicing-methods",
    "title": "Python Basics",
    "section": "Slicing Methods",
    "text": "Slicing Methods\nImportant to remember for lists, Index Starts at 0 not\nUsed when you want to extract a substring from the string\nIn python it is left inclusive and right exlcusive\n###Format [start : end : stop]\n[:] –&gt; extracts the entire list\n##Bulit in Functions len() command gets the length of the string or how many elements are in a list\nDot operation:\n-used to access atributes ex:\n( .split, . delete, .add, .join)\n\n#Slicing Methods practice:\n# [start: end: step]\nletters ='abcdeghij'\nletters[4:]\n\n'eghij'\n\n\n\nletters[:3] #it does not include the 3rd element! its left inclusive but RIGHT EXCLUSIVE and remember index starts at 0\n\n'abc'\n\n\n\n#Cw 4.3\nfare= \"$10.00\"\ntip= \"2.00$\"\ntax= \"$ 0.80\"\n\nfare=fare[1:] #slicing to exclude the $\ntip=tip[:-1]\ntax=tax[2:]\n\nfare = float(fare)  #type casting\ntip=float(tip)\ntax=float(tax)\n\ntot=fare+tip+tax\nprint(\"the total price is\", tot)\n\nthe total price is 12.8"
  },
  {
    "objectID": "posts/python-basic/danl_210_python_basics.html#q1a",
    "href": "posts/python-basic/danl_210_python_basics.html#q1a",
    "title": "Python Basics",
    "section": "Q1a",
    "text": "Q1a\n\nCreate a list of integers from 1 to 10.\nAppend the number 11 to the list and remove the number 5.\n\n\nlist=[1,2,3,4,5,6,7,8,9,10]\nlist.append(11) #append adds a value to the end of the\nlist.remove(5)\nlist\n\n[1, 2, 3, 4, 6, 7, 8, 9, 10, 11]"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]